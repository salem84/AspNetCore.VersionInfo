# based on https://dusted.codes/github-actions-for-dotnet-core-nuget-packages
name: .NET

on:
  push:
  pull_request:
  # release:
  #   types:
  #     - published

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: AspNetCore.VersionInfo
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/salem84/
  GITHUB_USER: salem84
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}

  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CONFIGURATION: "Release"

    steps:
    # - name: Inspect contexts
    #   run: |
    #     echo "The github context is:"
    #     echo "${{ toJson(github) }}"
    #     echo ""
    #     echo "The job context is:"
    #     echo "${{ toJson(job) }}"
    #     echo ""
    #     echo "The steps context is:"
    #     echo "${{ toJson(steps) }}"
    #     echo ""
    #     echo "The runner context is:"
    #     echo "${{ toJson(runner) }}"
    #     echo ""
    #     echo "The strategy context is:"
    #     echo "${{ toJson(strategy) }}"
    #     echo ""
    #     echo "The matrix context is:"
    #     echo "${{ toJson(matrix) }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.15

    - name: Build info
      run: |
        echo "Build Info"
        echo "-----------------------------------------------------------------------"
        echo "Configuration: $CONFIGURATION"
        echo "Run ID: ${{ github.run_id }}"
        echo "Output Run Number: ${{ github.run_number }}"
        echo "Major: ${{ steps.gitversion.outputs.Major }}"
        echo "Minor: ${{ steps.gitversion.outputs.Minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.Patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.PreReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.PreReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.PreReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.WeightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.BuildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.BuildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.FullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.SemVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.LegacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.LegacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.BranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.Sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.ShortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.NuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.NuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.NuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.NuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.VersionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.CommitsSinceVersionSourcePadded }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.CommitDate }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: "${{ steps.gitversion.outputs.NuGetVersionV2 }}-preview.${{github.run_id}}.${{github.run_number}}"
        assemblyVersion: "${{steps.gitversion.outputs.MajorMinorPatch}}.${{github.run_number}}"
        fileVersion: "${{steps.gitversion.outputs.MajorMinorPatch}}.${{github.run_number}}"
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}
      #if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/master' }}

    - name: Update project version (release)
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        assemblyVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        fileVersion: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}
      if: startsWith(github.ref, 'refs/tags/')

    #### Start SonarCloud steps
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ~/.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

    - name: Start Sonarcloud
      run: |
        ~/.sonar/scanner/dotnet-sonarscanner begin \
          /k:"salem84_AspNetCore.VersionInfo" \
          /o:"salem84" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration $CONFIGURATION

    - name: Test
      run: dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml

    - name: Pack
      run: dotnet pack -v normal -c $CONFIGURATION --no-restore --no-build --include-symbols --include-source src/$PROJECT_NAME/$PROJECT_NAME.*proj

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: ./src/${{ env.PROJECT_NAME }}/bin/${{ env.CONFIGURATION }}/*.nupkg

    - name: Stop Sonarcloud
      run: ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"

  publish:
    needs: build
    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: nupkg

      - name: Push to GitHub Feed
        shell: bash
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done

      - name: Push to NuGet Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
        if: startsWith(github.ref, 'refs/tags/')
